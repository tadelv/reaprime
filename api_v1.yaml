openapi: 3.0.3
info:
  title: Rea Prime API
  version: 1.0.0
  description: |
    This API provides endpoints to retrieve a list of Bluetooth devices, trigger a scan for new devices, manage DE1 espresso machine state and settings, and interact with a connected scale.
servers:
  - url: http://{tablet-ip}
    variables:
      tablet-ip:
        default: localhost

paths:
  /api/v1/devices:
    get:
      summary: Get Available Devices
      description: Retrieves a list of available Bluetooth devices with their connection states.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string
                    state:
                      type: string
                      enum: [connected, disconnected]
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/devices/scan:
    get:
      summary: Scan for Devices
      description: Triggers a Bluetooth device scan.
      responses:
        "200":
          description: Scan started successfully
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/de1/state:
    get:
      summary: Get DE1 State
      description: Retrieves the current DE1 machine state.
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineSnapshot"
  /api/v1/de1/state/{newState}:
    put:
      summary: Request DE1 State Change
      description: Requests a state change for the DE1 espresso machine.
      parameters:
        - name: newState
          in: path
          required: true
          schema:
            $ref: "#/components/schemas/MachineState"
      responses:
        "200":
          description: State change successful
        "400":
          description: Bad Request
  /api/v1/de1/profile:
    post:
      summary: Set DE1 Profile
      description: Uploads a new brewing profile to the DE1 machine.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Profile"
      responses:
        "200":
          description: Profile updated successfully
  /api/v1/de1/shotSettings:
    post:
      summary: Update Shot Settings
      description: Updates shot settings on the DE1 espresso machine.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ShotSettings"
      responses:
        "200":
          description: Shot settings updated successfully
  /api/v1/de1/settings:
    get:
      summary: Get De1 settings
      description: pulls additional settings from the De1
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/De1SettingsResponse"
    post:
      summary: Set De1 settings
      description: set additional settings on the De1, each setting can be set individually
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/De1SettingsRequest"
      responses:
        "200":
          description: Settings update successful
  /api/v1/de1/settings/advanced:
    get:
      summary: Get advanced De1 settings
      description: Get additional advanced De1 settings
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/De1AdvancedSettingsResponse"
    post:
      summary: Set advanced De1 settings
      description: Set advanced settings on the De1, each setting can be sent separately
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/De1AdvancedSettingsRequest"
      responses:
        "200":
          description: Advanced settings updated successfully
  /api/v1/de1/usb/{state}:
    put:
      summary: Toggle USB Charger Mode
      description: Enables or disables the USB charger mode on the DE1 machine.
      parameters:
        - name: state
          in: path
          required: true
          schema:
            type: string
            enum: [enable, disable]
      responses:
        "200":
          description: USB mode updated successfully
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /api/v1/de1/firmware:
    post:
      summary: Push new firmware to the De1
      description: Send a firmware file to De1, the call will wait until the firmware upgrade is complete (which might be a long time)
      requestBody:
        required: true
        content:
          application/octet-stream:
      responses:
        "200":
          description: Firmware update successful. Need to restart De1 to load new firmware
        "500":
          description: Something went wrong during the firmware upgrade process. Check the response and Rea logs

  /api/v1/scale/tare:
    put:
      summary: Tare Scale
      description: Tares the connected scale.
      responses:
        "200":
          description: Scale tared successfully
        "404":
          description: Scale not found

  /api/v1/sensors:
    get:
      summary: Get a list of sensor devices connected to Rea
      description: Will show all the sensors and their ids, that are currently connected and available through Rea
      responses:
        "200":
          description: List of available sensors
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    id:
                      type: string


  /ws/v1/de1/snapshot:
    get:
      summary: WebSocket Snapshot Updates
      description: Receives real-time snapshot data from the DE1 machine.
      responses:
        "200":
          description: "Socket message"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MachineSnapshot"
  /ws/v1/de1/shotSettings:
    get:
      summary: WebSocket Shot Settings Updates
      description: Receives real-time shot settings updates.
      responses:
        "200":
          description: "a snapshot of ShotSettings"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ShotSettings"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ws/v1/de1/waterLevels:
    get:
      summary: WebSocket Water Levels Updates
      description: Receives real-time water level updates.
      responses:
        "200":
          description: "a snapshot of WaterLevels"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WaterLevels"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ws/v1/scale/snapshot:
    get:
      summary: WebSocket Scale Snapshot
      description: Receives real-time weight data from the scale.
      responses:
        "200":
          description: "a snapshot of Scale data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScaleSnapshot"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /ws/v1/de1/raw:
    get:
      summary: Websocket De1 raw BLE data
      description: Receives real-time BLE data from DE1. Use this to send and receive BLE messages
      responses:
        "200":
          description: Upgraded to websocket messages
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/De1RawMessage"

components:
  schemas:
    Error:
      type: object
      properties:
        e:
          type: string
        st:
          type: string
    ScaleSnapshot:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        weight:
          type: number
        batteryLevel:
          type: integer
    MachineSnapshot:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        state:
          type: object
          properties:
            state:
              $ref: "#/components/schemas/MachineState"
            substate:
              $ref: "#/components/schemas/MachineSubstate"
        flow:
          type: number
        pressure:
          type: number
          example: 6.2
        targetFlow:
          type: number
        targetPressure:
          type: number
        mixTemperature:
          type: number
        groupTemperature:
          type: number
        targetMixTemperature:
          type: number
        targetGroupTemperature:
          type: number
        profileFrame:
          type: integer
        steamTemperature:
          type: number
    MachineState:
      type: string
      enum: [idle, booting, sleeping, heating, preheating, espresso, hotWater, flush, steam, skipStep, cleaning, descaling, transportMode, needsWater, error]
      example: espresso
    MachineSubstate:
      type: string
      enum: [   idle,
        preparingForShot, 
        preinfusion,
        pouring,
        pouringDone,
        cleaningStart, 
        cleaingGroup, 
        cleanSoaking,
        cleaningSteam,
      ]
      example: preparingForShot
    Profile:
      type: object
      properties:
        version:
          type: string
        title:
          type: string
        notes:
          type: string
        author:
          type: string
        beverage_type:
          type: string
        steps:
          type: array
          items:
            type: object
        target_volume:
          type: number
        target_weight:
          type: number
        target_volume_count_start:
          type: integer
        tank_temperature:
          type: number
    ShotSettings:
      type: object
      properties:
        steamSetting:
          type: integer
        targetSteamTemp:
          type: number
        targetSteamDuration:
          type: integer
        targetHotWaterTemp:
          type: number
        targetHotWaterVolume:
          type: number
        targetHotWaterDuration:
          type: integer
        targetShotVolume:
          type: number
        groupTemp:
          type: number
    WaterLevels:
      type: object
      properties:
        currentPercentage:
          type: integer
        warningThresholdPercentage:
          type: integer
    De1SettingsRequest:
      type: object
      properties:
        usb:
          type: boolean
          nullable: true
        fan:
          type: integer
          nullable: true
        flushTemp:
          type: integer
          nullable: true
        flushFlow:
          type: number
          nullable: true
        flushTimeout:
          type: integer
          nullable: true
        hotWaterFlow:
          type: number
          nullable: true
        steamFlow:
          type: number
          nullable: true
        tankTemp:
          type: integer
          nullable: true
    De1SettingsResponse:
      type: object
      properties:
        usb:
          type: boolean
        fan:
          type: integer
        flushTemp:
          type: integer
        flushFlow:
          type: number
        flushTimeout:
          type: integer
        hotWaterFlow:
          type: number
        steamFlow:
          type: number
        tankTemp:
          type: integer
    De1AdvancedSettingsRequest:
      type: object
      properties:
        heaterPh1Flow:
          description: Heater phase 1 flow (when heating up for shot)
          type: number
          nullable: true
        heaterPh2Flow:
          description: Heater phase 2 flow (when heating up for shot)
          type: number
          nullable: true
        heaterIdleTemp:
          description: Heater idle temperature
          type: number
          nullable: true
        heaterPh2Timeout:
          description: Heater phase 2 timeout in seconds (how long should de1 try to stabilize temperature)
          type: integer
          nullable: true
    De1AdvancedSettingsResponse:
      type: object
      properties:
        heaterPh1Flow:
          description: Heater phase 1 flow (when heating up for shot)
          type: number
        heaterPh2Flow:
          description: Heater phase 2 flow (when heating up for shot)
          type: number
        heaterIdleTemp:
          description: Heater idle temperature
          type: number
        heaterPh2Timeout:
          description: Heater phase 2 timeout in seconds (how long should de1 try to stabilize temperature)
          type: integer
    De1RawMessage:
      type: object
      required:
        - type
        - operation
        - characteristicUUID
        - payload
      properties:
        type:
          $ref: '#/components/schemas/De1RawMessageType'
        operation:
          $ref: '#/components/schemas/De1RawOperationType'
        characteristicUUID:
          type: string
          description: UUID of the characteristic (len = 4).
        payload:
          type: string
          description: The data payload as a hex string.

    De1RawMessageType:
      type: string
      enum:
        - request
        - response
      description: Type of raw message indicating whether it's a request or response.

    De1RawOperationType:
      type: string
      enum:
        - read
        - write
        - notify
      description: Operation type indicating the nature of the raw message.
